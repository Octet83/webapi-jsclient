/**
 * Tripartie Web API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ModelUser from '../model/ModelUser';
import RequestRegisterUser from '../model/RequestRegisterUser';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Unregister
     * Unregister a User using its External ID or Tripartie ID.<br /> You MUST provide either <code>external-id</code> or <code>tripartie-id</code>, but not both.<br /> This wont delete the User's Tripartie account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalId The User's External ID.
     * @param {Number} opts.tripartieId The User's Tripartie ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unregisterWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'external-id': opts['externalId'],
        'tripartie-id': opts['tripartieId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/web/users/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unregister
     * Unregister a User using its External ID or Tripartie ID.<br /> You MUST provide either <code>external-id</code> or <code>tripartie-id</code>, but not both.<br /> This wont delete the User's Tripartie account. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalId The User's External ID.
     * @param {Number} opts.tripartieId The User's Tripartie ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unregister(opts) {
      return this.unregisterWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch
     * Fetch a User by its External ID or Tripartie ID.<br /> You MUST provide either <code>external-id</code> or <code>tripartie-id</code>, but not both. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalId The User's External ID.
     * @param {Number} opts.tripartieId The User's Tripartie ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelUser} and HTTP response
     */
    fetchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'external-id': opts['externalId'],
        'tripartie-id': opts['tripartieId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelUser;
      return this.apiClient.callApi(
        '/api/web/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch
     * Fetch a User by its External ID or Tripartie ID.<br /> You MUST provide either <code>external-id</code> or <code>tripartie-id</code>, but not both. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalId The User's External ID.
     * @param {Number} opts.tripartieId The User's Tripartie ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelUser}
     */
    fetch(opts) {
      return this.fetchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register
     * @param {module:model/RequestRegisterUser} requestRegisterUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelUser} and HTTP response
     */
    registerWithHttpInfo(requestRegisterUser) {
      let postBody = requestRegisterUser;
      // verify the required parameter 'requestRegisterUser' is set
      if (requestRegisterUser === undefined || requestRegisterUser === null) {
        throw new Error("Missing the required parameter 'requestRegisterUser' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelUser;
      return this.apiClient.callApi(
        '/api/web/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Register
     * @param {module:model/RequestRegisterUser} requestRegisterUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelUser}
     */
    register(requestRegisterUser) {
      return this.registerWithHttpInfo(requestRegisterUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
