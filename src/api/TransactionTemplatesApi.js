/**
 * Tripartie Web API
 * This document describes all use cases offered by the Tripartie Web API.<br /><br /> The Tripartie Web API allows you to easily create Transaction templates.<br /> Those templates allows a User (the Buyer) to quickly initiate a Transaction pre-configured by another User (the Seller).<br /> This allows you to add a Secured Payment button on your website pages.<br /> To facilitate working with the Web API, we built libraries for common developpement environment.<br/><br/> You're reading the documentation for version 1.0 of the Web API.<br/> Go to version <select id=\"version-switcher\"></select> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tripartie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ModelTransactionTemplate from '../model/ModelTransactionTemplate';
import RequestCreateTransactionTemplate from '../model/RequestCreateTransactionTemplate';

/**
* TransactionTemplates service.
* @module api/TransactionTemplatesApi
* @version 1.0
*/
export default class TransactionTemplatesApi {

    /**
    * Constructs a new TransactionTemplatesApi. 
    * @alias module:api/TransactionTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Fetch
     * Fetch a Transaction template by its External ID or Tripartie ID.<br /> You MUST provide either <code>external-id</code> or <code>tripartie-id</code>, but not both. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalId The resource's External ID.
     * @param {Number} opts.tripartieId The resource's Tripartie ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelTransactionTemplate} and HTTP response
     */
    fetchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'external-id': opts['externalId'],
        'tripartie-id': opts['tripartieId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelTransactionTemplate;
      return this.apiClient.callApi(
        '/api/web/transaction-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch
     * Fetch a Transaction template by its External ID or Tripartie ID.<br /> You MUST provide either <code>external-id</code> or <code>tripartie-id</code>, but not both. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalId The resource's External ID.
     * @param {Number} opts.tripartieId The resource's Tripartie ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelTransactionTemplate}
     */
    fetch(opts) {
      return this.fetchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create a Transaction template.<br /> You MUST provide either sellerExternalId or sellerTripartieId but not both 
     * @param {module:model/RequestCreateTransactionTemplate} requestCreateTransactionTemplate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelTransactionTemplate} and HTTP response
     */
    createWithHttpInfo(requestCreateTransactionTemplate) {
      let postBody = requestCreateTransactionTemplate;
      // verify the required parameter 'requestCreateTransactionTemplate' is set
      if (requestCreateTransactionTemplate === undefined || requestCreateTransactionTemplate === null) {
        throw new Error("Missing the required parameter 'requestCreateTransactionTemplate' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelTransactionTemplate;
      return this.apiClient.callApi(
        '/api/web/transaction-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create a Transaction template.<br /> You MUST provide either sellerExternalId or sellerTripartieId but not both 
     * @param {module:model/RequestCreateTransactionTemplate} requestCreateTransactionTemplate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelTransactionTemplate}
     */
    create(requestCreateTransactionTemplate) {
      return this.createWithHttpInfo(requestCreateTransactionTemplate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
